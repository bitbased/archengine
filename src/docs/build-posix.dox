/*! @page build-posix Building and installing ArchEngine on POSIX

@section posix_github Building using Git and GitHub

Skip this step if you are building from a ArchEngine release package,
and proceed with @ref posix_building.

To build from the ArchEngine GitHub repository requires
<a href="http://git-scm.com/">git</a>,
<a href="http://www.gnu.org/software/autoconf/autoconf.html">autoconf</a>,
<a href="http://www.gnu.org/software/autoconf/automake.html">automake</a>,
<a href="http://www.gnu.org/software/libtool/libtool.html">libtool</a> and
related tools.  The standard options for those tools can be specified
when configuring and building ArchEngine.

First, clone the repository:

@code
git clone git://github.com/archengine/archengine.git
@endcode

Second, run \c autogen.sh to create the \c configure script:

@code
cd archengine
sh autogen.sh
@endcode

Now proceed with @ref posix_building.

@section posix_building Building ArchEngine

To build the ArchEngine software on a POSIX system, change directory to
the top-level directory, then configure and build the software:

@code
cd archengine
./configure && make
@endcode

To rebuild from scratch, discard any previous configuration by cleaning
out the build area:

@code
make distclean
@endcode

To see additional configuration options, run:

@code
./configure --help
@endcode

ArchEngine uses
<a href="http://www.gnu.org/software/autoconf/autoconf.html">autoconf</a>
<a href="http://www.gnu.org/software/autoconf/automake.html">automake</a>,
and <a href="http://www.gnu.org/software/libtool/libtool.html">libtool</a>
to create the configure script and Makefiles.  The standard options for those
tools can be specified when configuring and building ArchEngine.

@section posix_installing Installing ArchEngine

The ArchEngine software consists of a library and a single standalone
utility.

ArchEngine's distribution follows the GNU Coding Standards installation
guidelines, and by default ArchEngine builds and installs four versions
of the library in <code>/usr/local/lib</code>.  For example:

@code
file /usr/local/lib/libarchengine*
/usr/local/lib/libarchengine-1.0.0.so: ELF 64-bit LSB shared object, x86-64, version 1 (FreeBSD), dynamically linked, not stripped
/usr/local/lib/libarchengine.a:        current ar archive
/usr/local/lib/libarchengine.la:       libtool library file
/usr/local/lib/libarchengine.so:       symbolic link to `libarchengine-1.0.0.so'
@endcode

ArchEngine uses
<a href="http://www.gnu.org/software/libtool/libtool.html">libtool</a> to
build the libraries.  By default, both shared and static libraries are built.
To build only static libraries, configure ArchEngine using the
\c --disable-shared argument. To build only shared libraries, configure using
ArchEngine using the \c --disable-static argument.

In addition, ArchEngine installs a standalone utility program named
<code>ae</code>.  By default, this utility is installed in
<code>/usr/local/bin/ae</code>.

To install ArchEngine:

@code
make install
@endcode

To uninstall ArchEngine:

@code
make uninstall
@endcode

To install ArchEngine's libraries or binaries into alternate locations,
use the configuration or installation options described in the
<a href="http://www.gnu.org/prep/standards/">GNU coding standards</a>
documentation.  For example, to install the libraries and binaries into
a different location:

@code
./configure --prefix=/c/archengine
@endcode

@section posix_configure Configuring ArchEngine

The ArchEngine software supports some additional configuration options:

@par \c --enable-attach
Configure ArchEngine to sleep and wait for a debugger to attach on failure.
<b>DO NOT</b> configure this option in production environments.

@par \c --enable-bzip2
Configure ArchEngine for <a href="http://www.bzip.org/">bzip2</a>
compression; see @ref compression for more information.

@par \c --enable-diagnostic
Configure ArchEngine to perform various run-time diagnostic tests.
<b>DO NOT</b> configure this option in production environments.

@par \c --enable-java
Build the ArchEngine Java API.

@par \c --enable-leveldb[=basho, hyper, rocksdb]
Include a Google, Inc. compatible LevelDB API. Optionally, specify \c basho
to build a version of the LevelDB API compatible with Basho's Riak
product, specify \c hyper to build a version of the LevelDB API compatible
with the HyperDex product, and specify \c rocksdb to build a version of the
LevelDB API compatible with applications using Facebook's RocksDB
engine. See @ref leveldb for more information.

@par \c --enable-lz4
Configure ArchEngine for <a href="https://github.com/Cyan4973/lz4">LZ4</a>
compression; see @ref compression for more information.

@par \c --enable-python
Build the ArchEngine <a href="http://www.python.org">Python</a> API.

@par \c --enable-snappy
Configure ArchEngine for <a href="http://code.google.com/p/snappy/">snappy</a>
compression; see @ref compression for more information.

@par \c --enable-verbose
Configure ArchEngine to support the \c verbose configuration string to
::archengine_open.

@par \c --enable-zlib
Configure ArchEngine for <a href="http://www.zlib.net/">zlib</a>
compression; see @ref compression for more information.

@par <code>--with-builtins</code>
Configure ArchEngine to include support for extensions in the main library.
This avoids requiring additional libraries for supported extensions. Currently
supported options are \c lz4, \c snappy and \c zlib.

@par <code>--with-python-prefix</code>
Configure ArchEngine to install Python libraries to a non-standard Python
install location.

@par <code>--with-spinlock[=pthread, pthread_adaptive, gcc]</code>
Configure ArchEngine to use a specific mutex type for serialization;
options are \c pthread (the default, which configures ArchEngine to use
POSIX 1003.1c pthread mutexes), \c pthread_adaptive (which configures
ArchEngine to use POSIX 1003.1c pthread mutexes configured to be
adaptive (where that functionality is available), or \c gcc (which
configures ArchEngine to use gcc-based spinlocks).

@section posix_compiler Changing compiler or loader options

To change the compiler or loader behavior during the build, use the
<code>CC</code>, <code>CFLAGS</code>, <code>LDFLAGS</code>, or
<code>LIBS</code> environment variables:

@par \c CC
The compiler.
@par \c CFLAGS
Compiler flags.
@par \c LDFLAGS
Loader flags.
@par \c LIBS
Additional libraries.

For example, to specify a different compiler:

@code
env CC=mygcc ./configure
@endcode

By default, ArchEngine builds with the \c -O3 compiler optimization flag
unless the \c --enable-debug configuration option is specified, in which
case the \c -g compiler flag is used instead.  For example, to specify
a different level of optimization:

@code
env CFLAGS=-Os ./configure
@endcode

To specify a different set of include files:

@code
env CFLAGS=-I/usr/local/include ./configure
@endcode

To specify an additional library:

@code
env LIBS="-lrtf -lmin" LDFLAGS=-L/usr/local/lib ./configure
@endcode
 */
