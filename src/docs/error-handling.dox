/*! @m_page{{c,java},error_handling,Error handling}

ArchEngine operations return a value of 0 on success and a non-zero
value on error.  Error codes may be either positive or negative:
positive error codes are standard error codes as described for
POSIX-like systems (for example, EINVAL or EBUSY), negative error codes
are ArchEngine-specific (for example, AE_ROLLBACK).

ArchEngine-specific error codes always appear in the -31,800 to -31,999
range.

@m_if{java}
Informational return values, like <code>archengine.AE_NOTFOUND</code>
or <code>archengine.AE_DUPLICATE_KEY</code> or 0 (success),
are directly returned by APIs.  More severe errors
are thrown as \c ArchEngineException, which may be caught by the
application.

The \c ArchEngineRollbackException is a specific type of \c ArchEngineException,
it is thrown when there is a conflict between concurrent operations.
An application that catches this exception should call rollback() on
the relevant transaction, and retry as necessary.

The \c ArchEnginePanicException is a specific type of \c ArchEngineException,
it is thrown when there is an underlying problem that requires the
application to exit and restart.

The following is a complete list of possible ArchEngine-specific
return values, all constants defined in the com.archengine.db.archengine class:
@m_else
The following is a list of possible ArchEngine-specific errors:
@m_endif

@if IGNORE_BUILT_BY_API_ERR_BEGIN
@endif

@par <code>AE_ROLLBACK</code>
This error is generated when an operation cannot be completed due to a conflict with concurrent operations. The operation may be retried; if a transaction is in progress, it should be rolled back and the operation retried in a new transaction.

@par <code>AE_DUPLICATE_KEY</code>
This error is generated when the application attempts to insert a record with the same key as an existing record without the 'overwrite' configuration to AE_SESSION::open_cursor.

@par <code>AE_ERROR</code>
This error is returned when an error is not covered by a specific error return.

@par <code>AE_NOTFOUND</code>
This error indicates an operation did not find a value to return. This includes cursor search and other operations where no record matched the cursor's search key such as AE_CURSOR::update or AE_CURSOR::remove.

@par <code>AE_PANIC</code>
This error indicates an underlying problem that requires the application exit and restart. The application can exit immediately when \c AE_PANIC is returned from a ArchEngine interface, no further ArchEngine calls are required.

@par <code>AE_RUN_RECOVERY</code>
This error is generated when archengine_open is configured to return an error if recovery is required to use the database.

@if IGNORE_BUILT_BY_API_ERR_END
@endif

The ::archengine_strerror function returns the standard message
associated with any ArchEngine, ISO C99, or POSIX 1003.1-2001 function:

@snippet ex_all.c Display an error

@m_if{c}
More complex error handling can be configured by passing an implementation
of AE_EVENT_HANDLER to ::archengine_open or AE_CONNECTION::open_session.
@m_endif

*/
